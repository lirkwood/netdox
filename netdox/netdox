#!/usr/bin/env bash

APPDIR=$(dirname $(realpath $0))

## Print usage help
function help {
    echo 'Usage: netdox init|serve|refresh|start|help'; echo
    echo '       init:       Initialises the environment so that Netdox can run.'
    echo '       serve:      Starts the serve and begins listening for webhooks.'
    echo '       refresh:    Generates a new data set and uploads it to PageSeeder.'
    echo "       start:      Runs 'init' and then 'serve'."
    echo '       help:       Prints this message.'
}

## Serve webhook listener
function serve {
    gunicorn --reload -b '0.0.0.0:8080' -t 900 serve:app
}

## Refresh dataset and upload to PageSeeder
function refresh {
    _refresh 2>&1 | tee "/etc/netdox/log/refresh-$(date +%F-T%T).log"
}
function _refresh {
    python3 refresh.py

    cp $APPDIR/src/domains.json /etc/netdox/domains.json &> /dev/null
    cp $APPDIR/src/ips.json /etc/netdox/ips.json &> /dev/null
    cp $APPDIR/src/nodes.json /etc/netdox/nodes.json &> /dev/null
}

## Initialise container to allow other processes to run
function init {
    [[ -d /etc/netdox ]] || (mkdir /etc/netdox \
        && echo 'Please place the required configuration files in /etc/netdox and run this again.'; exit 1)

    [[ -d /etc/netdox/log ]] || mkdir /etc/netdox/log

    jsonfiles=("domains" "ips" "nodes")
    for file in ${jsonfiles[@]}; do
        [[ -f /etc/netdox/$file.json ]] && cp /etc/netdox/$file.json $APPDIR/src/$file.json
    done

    # make all scripts executable
    chmod 777 $APPDIR/*
    
    # decrypt authentication details
    ./crypto.sh decrypt $(printf authivpassphrase | xxd -p) "/etc/netdox/cfg/config.bin" "$APPDIR/src/config.json"
    
    # copy any unecrypted cfg files
    for file in /etc/netdox/cfg/*.json; do
        [[ -f $file ]] && cp $file $APPDIR/src/$(basename $file)
    done

    if python3 init.py
        then
            echo '[INFO][netdox] Python initialisation successful.'
        else
            echo '[ERROR][netdox] Python initialisation unsuccessful. Terminating...'
            exit 1
    fi
}


methods=("init" "refresh" "serve" "help")
for arg in "$@"; do
    if [[ ${methods[@]} =~ $arg ]]
        then case $arg in
            serve)
                serve &
                ;;
            *)
                $arg
                ;;
        esac
    elif [[ $arg == 'start' ]]
        then if init
            then serve
        fi
    fi
done